// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: srx.proto

package srx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrxService_RegisterService_FullMethodName = "/convers.srx.v1.SrxService/RegisterService"
	SrxService_DiscoverService_FullMethodName = "/convers.srx.v1.SrxService/DiscoverService"
	SrxService_Heartbeat_FullMethodName       = "/convers.srx.v1.SrxService/Heartbeat"
)

// SrxServiceClient is the client API for SrxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service registry
type SrxServiceClient interface {
	// Register a new service
	RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Discover a service by name
	DiscoverService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	// Health check to maintain service status
	Heartbeat(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type srxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSrxServiceClient(cc grpc.ClientConnInterface) SrxServiceClient {
	return &srxServiceClient{cc}
}

func (c *srxServiceClient) RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SrxService_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srxServiceClient) DiscoverService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, SrxService_DiscoverService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srxServiceClient) Heartbeat(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, SrxService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrxServiceServer is the server API for SrxService service.
// All implementations must embed UnimplementedSrxServiceServer
// for forward compatibility.
//
// Define the service registry
type SrxServiceServer interface {
	// Register a new service
	RegisterService(context.Context, *ServiceInfo) (*RegisterResponse, error)
	// Discover a service by name
	DiscoverService(context.Context, *ServiceRequest) (*ServiceResponse, error)
	// Health check to maintain service status
	Heartbeat(context.Context, *ServiceInfo) (*HeartbeatResponse, error)
	mustEmbedUnimplementedSrxServiceServer()
}

// UnimplementedSrxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrxServiceServer struct{}

func (UnimplementedSrxServiceServer) RegisterService(context.Context, *ServiceInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedSrxServiceServer) DiscoverService(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverService not implemented")
}
func (UnimplementedSrxServiceServer) Heartbeat(context.Context, *ServiceInfo) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedSrxServiceServer) mustEmbedUnimplementedSrxServiceServer() {}
func (UnimplementedSrxServiceServer) testEmbeddedByValue()                    {}

// UnsafeSrxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrxServiceServer will
// result in compilation errors.
type UnsafeSrxServiceServer interface {
	mustEmbedUnimplementedSrxServiceServer()
}

func RegisterSrxServiceServer(s grpc.ServiceRegistrar, srv SrxServiceServer) {
	// If the following call pancis, it indicates UnimplementedSrxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrxService_ServiceDesc, srv)
}

func _SrxService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrxServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrxService_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrxServiceServer).RegisterService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrxService_DiscoverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrxServiceServer).DiscoverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrxService_DiscoverService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrxServiceServer).DiscoverService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrxService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrxServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrxService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrxServiceServer).Heartbeat(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// SrxService_ServiceDesc is the grpc.ServiceDesc for SrxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convers.srx.v1.SrxService",
	HandlerType: (*SrxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _SrxService_RegisterService_Handler,
		},
		{
			MethodName: "DiscoverService",
			Handler:    _SrxService_DiscoverService_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _SrxService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srx.proto",
}
