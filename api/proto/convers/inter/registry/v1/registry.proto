// Copyright 2024 The ConvÄ“rs Authors.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package convers.inter.registry.v1;

option go_package = "github.com/convrz/convers/api/gen/go/inter/registry/v1;registry";

// Define the service registry
service ServiceRegistryService {
  // Register a new service
  rpc RegisterService(RegisterServiceRequest) returns (RegisterServiceResponse);

  // Discover a service by name
  rpc DiscoverService(DiscoverServiceRequest) returns (DiscoverServiceResponse);

  // Health check to maintain service status
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// Detailed service information
message RegisterServiceRequest {
  string name = 1;       // Service name
  string address = 2;    // IP address or hostname
  int32 port = 3;        // Service port
}

message HeartbeatRequest {
  string name = 1;       // Service name
  string address = 2;    // IP address or hostname
  int32 port = 3;        // Service port
}

// Request to find a service
message DiscoverServiceRequest {
  string name = 1;  // Name of the service to discover
}

// Response from the discovery process
message DiscoverServiceResponse {
  repeated RegisterServiceRequest services = 1;  // List of service instances
}

// Service registration response
message RegisterServiceResponse {
  string message = 1;  // Result message
}

// Heartbeat response
message HeartbeatResponse {
  bool success = 1;  // Heartbeat status
}
