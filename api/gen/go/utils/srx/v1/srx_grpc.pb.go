// Copyright 2024 The ConvÄ“rs Authors.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: srx.proto

package srx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceRegistryService_RegisterService_FullMethodName = "/convers.utils.srx.v1.ServiceRegistryService/RegisterService"
	ServiceRegistryService_DiscoverService_FullMethodName = "/convers.utils.srx.v1.ServiceRegistryService/DiscoverService"
	ServiceRegistryService_Heartbeat_FullMethodName       = "/convers.utils.srx.v1.ServiceRegistryService/Heartbeat"
)

// ServiceRegistryServiceClient is the client API for ServiceRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service registry
type ServiceRegistryServiceClient interface {
	// Register a new service
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	// Discover a service by name
	DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error)
	// Health check to maintain service status
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type serviceRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryServiceClient(cc grpc.ClientConnInterface) ServiceRegistryServiceClient {
	return &serviceRegistryServiceClient{cc}
}

func (c *serviceRegistryServiceClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryServiceClient) DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverServiceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_DiscoverService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistryServiceServer is the server API for ServiceRegistryService service.
// All implementations must embed UnimplementedServiceRegistryServiceServer
// for forward compatibility.
//
// Define the service registry
type ServiceRegistryServiceServer interface {
	// Register a new service
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	// Discover a service by name
	DiscoverService(context.Context, *DiscoverServiceRequest) (*DiscoverServiceResponse, error)
	// Health check to maintain service status
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

// UnimplementedServiceRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceRegistryServiceServer struct{}

func (UnimplementedServiceRegistryServiceServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedServiceRegistryServiceServer) DiscoverService(context.Context, *DiscoverServiceRequest) (*DiscoverServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverService not implemented")
}
func (UnimplementedServiceRegistryServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedServiceRegistryServiceServer) mustEmbedUnimplementedServiceRegistryServiceServer() {
}
func (UnimplementedServiceRegistryServiceServer) testEmbeddedByValue() {}

// UnsafeServiceRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServiceServer will
// result in compilation errors.
type UnsafeServiceRegistryServiceServer interface {
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

func RegisterServiceRegistryServiceServer(s grpc.ServiceRegistrar, srv ServiceRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceRegistryService_ServiceDesc, srv)
}

func _ServiceRegistryService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistryService_DiscoverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).DiscoverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_DiscoverService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).DiscoverService(ctx, req.(*DiscoverServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistryService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRegistryService_ServiceDesc is the grpc.ServiceDesc for ServiceRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convers.utils.srx.v1.ServiceRegistryService",
	HandlerType: (*ServiceRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _ServiceRegistryService_RegisterService_Handler,
		},
		{
			MethodName: "DiscoverService",
			Handler:    _ServiceRegistryService_DiscoverService_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _ServiceRegistryService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srx.proto",
}
