// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package news

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO news (
  content, category
) VALUES (
  $1, $2
)
RETURNING id, content, category, create_at
`

type CreateParams struct {
	Content  string      `json:"content"`
	Category pgtype.Text `json:"category"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (News, error) {
	row := q.db.QueryRow(ctx, create, arg.Content, arg.Category)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Category,
		&i.CreateAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM news
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, content, category, create_at FROM news
WHERE id = $1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id int64) (News, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Category,
		&i.CreateAt,
	)
	return i, err
}

const getMany = `-- name: GetMany :many
SELECT id, content, category, create_at FROM news
ORDER BY category
`

func (q *Queries) GetMany(ctx context.Context) ([]News, error) {
	rows, err := q.db.Query(ctx, getMany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Category,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE news
  set content = $2,
  category = $3
WHERE id = $1
RETURNING id, content, category, create_at
`

type UpdateParams struct {
	ID       int64       `json:"id"`
	Content  string      `json:"content"`
	Category pgtype.Text `json:"category"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (News, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Content, arg.Category)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Category,
		&i.CreateAt,
	)
	return i, err
}
